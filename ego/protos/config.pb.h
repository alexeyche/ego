// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_config_2eproto__INCLUDED
#define PROTOBUF_config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "extension.pb.h"
// @@protoc_insertion_point(includes)

namespace NEgoProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_config_2eproto();
void protobuf_AssignDesc_config_2eproto();
void protobuf_ShutdownFile_config_2eproto();

class TModelConfig;

// ===================================================================

class TModelConfig : public ::google::protobuf::Message {
 public:
  TModelConfig();
  virtual ~TModelConfig();

  TModelConfig(const TModelConfig& from);

  inline TModelConfig& operator=(const TModelConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TModelConfig& default_instance();

  void Swap(TModelConfig* other);

  // implements Message ----------------------------------------------

  TModelConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TModelConfig& from);
  void MergeFrom(const TModelConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Cov = 1;
  inline bool has_cov() const;
  inline void clear_cov();
  static const int kCovFieldNumber = 1;
  inline const ::std::string& cov() const;
  inline void set_cov(const ::std::string& value);
  inline void set_cov(const char* value);
  inline void set_cov(const char* value, size_t size);
  inline ::std::string* mutable_cov();
  inline ::std::string* release_cov();
  inline void set_allocated_cov(::std::string* cov);

  // optional string Mean = 2;
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 2;
  inline const ::std::string& mean() const;
  inline void set_mean(const ::std::string& value);
  inline void set_mean(const char* value);
  inline void set_mean(const char* value, size_t size);
  inline ::std::string* mutable_mean();
  inline ::std::string* release_mean();
  inline void set_allocated_mean(::std::string* mean);

  // optional string Inf = 3;
  inline bool has_inf() const;
  inline void clear_inf();
  static const int kInfFieldNumber = 3;
  inline const ::std::string& inf() const;
  inline void set_inf(const ::std::string& value);
  inline void set_inf(const char* value);
  inline void set_inf(const char* value, size_t size);
  inline ::std::string* mutable_inf();
  inline ::std::string* release_inf();
  inline void set_allocated_inf(::std::string* inf);

  // optional string Lik = 4;
  inline bool has_lik() const;
  inline void clear_lik();
  static const int kLikFieldNumber = 4;
  inline const ::std::string& lik() const;
  inline void set_lik(const ::std::string& value);
  inline void set_lik(const char* value);
  inline void set_lik(const char* value, size_t size);
  inline ::std::string* mutable_lik();
  inline ::std::string* release_lik();
  inline void set_allocated_lik(::std::string* lik);

  // optional string Input = 5;
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 5;
  inline const ::std::string& input() const;
  inline void set_input(const ::std::string& value);
  inline void set_input(const char* value);
  inline void set_input(const char* value, size_t size);
  inline ::std::string* mutable_input();
  inline ::std::string* release_input();
  inline void set_allocated_input(::std::string* input);

  // optional string Output = 6;
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 6;
  inline const ::std::string& output() const;
  inline void set_output(const ::std::string& value);
  inline void set_output(const char* value);
  inline void set_output(const char* value, size_t size);
  inline ::std::string* mutable_output();
  inline ::std::string* release_output();
  inline void set_allocated_output(::std::string* output);

  // optional bool ListEntities = 7;
  inline bool has_listentities() const;
  inline void clear_listentities();
  static const int kListEntitiesFieldNumber = 7;
  inline bool listentities() const;
  inline void set_listentities(bool value);

  // optional bool Verbose = 8;
  inline bool has_verbose() const;
  inline void clear_verbose();
  static const int kVerboseFieldNumber = 8;
  inline bool verbose() const;
  inline void set_verbose(bool value);

  // @@protoc_insertion_point(class_scope:NEgoProto.TModelConfig)
 private:
  inline void set_has_cov();
  inline void clear_has_cov();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_inf();
  inline void clear_has_inf();
  inline void set_has_lik();
  inline void clear_has_lik();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_output();
  inline void clear_has_output();
  inline void set_has_listentities();
  inline void clear_has_listentities();
  inline void set_has_verbose();
  inline void clear_has_verbose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cov_;
  ::std::string* mean_;
  ::std::string* inf_;
  ::std::string* lik_;
  ::std::string* input_;
  ::std::string* output_;
  bool listentities_;
  bool verbose_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static TModelConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// TModelConfig

// optional string Cov = 1;
inline bool TModelConfig::has_cov() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TModelConfig::set_has_cov() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TModelConfig::clear_has_cov() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TModelConfig::clear_cov() {
  if (cov_ != &::google::protobuf::internal::kEmptyString) {
    cov_->clear();
  }
  clear_has_cov();
}
inline const ::std::string& TModelConfig::cov() const {
  return *cov_;
}
inline void TModelConfig::set_cov(const ::std::string& value) {
  set_has_cov();
  if (cov_ == &::google::protobuf::internal::kEmptyString) {
    cov_ = new ::std::string;
  }
  cov_->assign(value);
}
inline void TModelConfig::set_cov(const char* value) {
  set_has_cov();
  if (cov_ == &::google::protobuf::internal::kEmptyString) {
    cov_ = new ::std::string;
  }
  cov_->assign(value);
}
inline void TModelConfig::set_cov(const char* value, size_t size) {
  set_has_cov();
  if (cov_ == &::google::protobuf::internal::kEmptyString) {
    cov_ = new ::std::string;
  }
  cov_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TModelConfig::mutable_cov() {
  set_has_cov();
  if (cov_ == &::google::protobuf::internal::kEmptyString) {
    cov_ = new ::std::string;
  }
  return cov_;
}
inline ::std::string* TModelConfig::release_cov() {
  clear_has_cov();
  if (cov_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cov_;
    cov_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TModelConfig::set_allocated_cov(::std::string* cov) {
  if (cov_ != &::google::protobuf::internal::kEmptyString) {
    delete cov_;
  }
  if (cov) {
    set_has_cov();
    cov_ = cov;
  } else {
    clear_has_cov();
    cov_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Mean = 2;
inline bool TModelConfig::has_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TModelConfig::set_has_mean() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TModelConfig::clear_has_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TModelConfig::clear_mean() {
  if (mean_ != &::google::protobuf::internal::kEmptyString) {
    mean_->clear();
  }
  clear_has_mean();
}
inline const ::std::string& TModelConfig::mean() const {
  return *mean_;
}
inline void TModelConfig::set_mean(const ::std::string& value) {
  set_has_mean();
  if (mean_ == &::google::protobuf::internal::kEmptyString) {
    mean_ = new ::std::string;
  }
  mean_->assign(value);
}
inline void TModelConfig::set_mean(const char* value) {
  set_has_mean();
  if (mean_ == &::google::protobuf::internal::kEmptyString) {
    mean_ = new ::std::string;
  }
  mean_->assign(value);
}
inline void TModelConfig::set_mean(const char* value, size_t size) {
  set_has_mean();
  if (mean_ == &::google::protobuf::internal::kEmptyString) {
    mean_ = new ::std::string;
  }
  mean_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TModelConfig::mutable_mean() {
  set_has_mean();
  if (mean_ == &::google::protobuf::internal::kEmptyString) {
    mean_ = new ::std::string;
  }
  return mean_;
}
inline ::std::string* TModelConfig::release_mean() {
  clear_has_mean();
  if (mean_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mean_;
    mean_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TModelConfig::set_allocated_mean(::std::string* mean) {
  if (mean_ != &::google::protobuf::internal::kEmptyString) {
    delete mean_;
  }
  if (mean) {
    set_has_mean();
    mean_ = mean;
  } else {
    clear_has_mean();
    mean_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Inf = 3;
inline bool TModelConfig::has_inf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TModelConfig::set_has_inf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TModelConfig::clear_has_inf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TModelConfig::clear_inf() {
  if (inf_ != &::google::protobuf::internal::kEmptyString) {
    inf_->clear();
  }
  clear_has_inf();
}
inline const ::std::string& TModelConfig::inf() const {
  return *inf_;
}
inline void TModelConfig::set_inf(const ::std::string& value) {
  set_has_inf();
  if (inf_ == &::google::protobuf::internal::kEmptyString) {
    inf_ = new ::std::string;
  }
  inf_->assign(value);
}
inline void TModelConfig::set_inf(const char* value) {
  set_has_inf();
  if (inf_ == &::google::protobuf::internal::kEmptyString) {
    inf_ = new ::std::string;
  }
  inf_->assign(value);
}
inline void TModelConfig::set_inf(const char* value, size_t size) {
  set_has_inf();
  if (inf_ == &::google::protobuf::internal::kEmptyString) {
    inf_ = new ::std::string;
  }
  inf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TModelConfig::mutable_inf() {
  set_has_inf();
  if (inf_ == &::google::protobuf::internal::kEmptyString) {
    inf_ = new ::std::string;
  }
  return inf_;
}
inline ::std::string* TModelConfig::release_inf() {
  clear_has_inf();
  if (inf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = inf_;
    inf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TModelConfig::set_allocated_inf(::std::string* inf) {
  if (inf_ != &::google::protobuf::internal::kEmptyString) {
    delete inf_;
  }
  if (inf) {
    set_has_inf();
    inf_ = inf;
  } else {
    clear_has_inf();
    inf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Lik = 4;
inline bool TModelConfig::has_lik() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TModelConfig::set_has_lik() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TModelConfig::clear_has_lik() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TModelConfig::clear_lik() {
  if (lik_ != &::google::protobuf::internal::kEmptyString) {
    lik_->clear();
  }
  clear_has_lik();
}
inline const ::std::string& TModelConfig::lik() const {
  return *lik_;
}
inline void TModelConfig::set_lik(const ::std::string& value) {
  set_has_lik();
  if (lik_ == &::google::protobuf::internal::kEmptyString) {
    lik_ = new ::std::string;
  }
  lik_->assign(value);
}
inline void TModelConfig::set_lik(const char* value) {
  set_has_lik();
  if (lik_ == &::google::protobuf::internal::kEmptyString) {
    lik_ = new ::std::string;
  }
  lik_->assign(value);
}
inline void TModelConfig::set_lik(const char* value, size_t size) {
  set_has_lik();
  if (lik_ == &::google::protobuf::internal::kEmptyString) {
    lik_ = new ::std::string;
  }
  lik_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TModelConfig::mutable_lik() {
  set_has_lik();
  if (lik_ == &::google::protobuf::internal::kEmptyString) {
    lik_ = new ::std::string;
  }
  return lik_;
}
inline ::std::string* TModelConfig::release_lik() {
  clear_has_lik();
  if (lik_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lik_;
    lik_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TModelConfig::set_allocated_lik(::std::string* lik) {
  if (lik_ != &::google::protobuf::internal::kEmptyString) {
    delete lik_;
  }
  if (lik) {
    set_has_lik();
    lik_ = lik;
  } else {
    clear_has_lik();
    lik_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Input = 5;
inline bool TModelConfig::has_input() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TModelConfig::set_has_input() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TModelConfig::clear_has_input() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TModelConfig::clear_input() {
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    input_->clear();
  }
  clear_has_input();
}
inline const ::std::string& TModelConfig::input() const {
  return *input_;
}
inline void TModelConfig::set_input(const ::std::string& value) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  input_->assign(value);
}
inline void TModelConfig::set_input(const char* value) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  input_->assign(value);
}
inline void TModelConfig::set_input(const char* value, size_t size) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  input_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TModelConfig::mutable_input() {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  return input_;
}
inline ::std::string* TModelConfig::release_input() {
  clear_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = input_;
    input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TModelConfig::set_allocated_input(::std::string* input) {
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    delete input_;
  }
  if (input) {
    set_has_input();
    input_ = input;
  } else {
    clear_has_input();
    input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Output = 6;
inline bool TModelConfig::has_output() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TModelConfig::set_has_output() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TModelConfig::clear_has_output() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TModelConfig::clear_output() {
  if (output_ != &::google::protobuf::internal::kEmptyString) {
    output_->clear();
  }
  clear_has_output();
}
inline const ::std::string& TModelConfig::output() const {
  return *output_;
}
inline void TModelConfig::set_output(const ::std::string& value) {
  set_has_output();
  if (output_ == &::google::protobuf::internal::kEmptyString) {
    output_ = new ::std::string;
  }
  output_->assign(value);
}
inline void TModelConfig::set_output(const char* value) {
  set_has_output();
  if (output_ == &::google::protobuf::internal::kEmptyString) {
    output_ = new ::std::string;
  }
  output_->assign(value);
}
inline void TModelConfig::set_output(const char* value, size_t size) {
  set_has_output();
  if (output_ == &::google::protobuf::internal::kEmptyString) {
    output_ = new ::std::string;
  }
  output_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TModelConfig::mutable_output() {
  set_has_output();
  if (output_ == &::google::protobuf::internal::kEmptyString) {
    output_ = new ::std::string;
  }
  return output_;
}
inline ::std::string* TModelConfig::release_output() {
  clear_has_output();
  if (output_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = output_;
    output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TModelConfig::set_allocated_output(::std::string* output) {
  if (output_ != &::google::protobuf::internal::kEmptyString) {
    delete output_;
  }
  if (output) {
    set_has_output();
    output_ = output;
  } else {
    clear_has_output();
    output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool ListEntities = 7;
inline bool TModelConfig::has_listentities() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TModelConfig::set_has_listentities() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TModelConfig::clear_has_listentities() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TModelConfig::clear_listentities() {
  listentities_ = false;
  clear_has_listentities();
}
inline bool TModelConfig::listentities() const {
  return listentities_;
}
inline void TModelConfig::set_listentities(bool value) {
  set_has_listentities();
  listentities_ = value;
}

// optional bool Verbose = 8;
inline bool TModelConfig::has_verbose() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TModelConfig::set_has_verbose() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TModelConfig::clear_has_verbose() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TModelConfig::clear_verbose() {
  verbose_ = false;
  clear_has_verbose();
}
inline bool TModelConfig::verbose() const {
  return verbose_;
}
inline void TModelConfig::set_verbose(bool value) {
  set_has_verbose();
  verbose_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NEgoProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_2eproto__INCLUDED
