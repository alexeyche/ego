#!/usr/bin/env python
import argparse
import sys
import os
import urllib2
import logging
import json
import subprocess as sub
import random as rnd
import logging
from collections import OrderedDict
import numpy as np
import time
import signal
import threading
import shlex

def lhs_sample(n, rng):
    return (rng.permutation(range(1,n+1)) - rng.random_sample(n))/float(n)


def add_coloring_to_emit_ansi(fn):
    # add methods we need to the class
    def new(*args):
        levelno = args[0].levelno
        if(levelno>=50):
            color = '\x1b[31m' # red
        elif(levelno>=40):
            color = '\x1b[31m' # red
        elif(levelno>=30):
            color = '\x1b[33m' # yellow
        elif(levelno>=20):
            color = '\x1b[32m' # green
        elif(levelno>=10):
            color = '\x1b[35m' # pink
        else:
            color = '\x1b[0m' # normal
        args[0].msg = color + args[0].msg +  '\x1b[0m'  # normal
        return fn(*args)
    return new


class TEgoClient(object):
    def __init__(self, server, problem, max_running):
        self.stop = threading.Event()
        self.server = server
        self.problem = problem
        self.calculations = []
        self.spec = self.get_specification()
        self.max_running = max_running
        signal.signal(signal.SIGINT, self.interrupt)


    def __ask(self, fun):
        if self.stopped():
            logging.info("Interrupting asking")
            return
        try:
            ans_str = urllib2.urlopen("{}/api/{}".format(self.server, fun)).read()
        except urllib2.HTTPError, err:
            if err.code == 503:
                return None
            raise

        logging.debug("Got answer: {}".format(ans_str))
        ans = json.loads(ans_str, object_pairs_hook=OrderedDict)
        return ans;

    def __ask_problem(self, fun):
        return self.__ask("problem/{}/{}".format(self.problem, fun))

    def __tell_problem(self, fun, telling):
        if self.stopped():
            logging.info("Interrupting telling")
            return

        logging.debug("Going to tell {} this:\n{}".format(fun, json.dumps(telling)))
        req = urllib2.Request(
            "{server}/api/problem/{problem}/{fun}".format(
                server = self.server,
                problem = self.problem,
                fun = fun,
            ),
            json.dumps(telling)
        )
        response = urllib2.urlopen(req)
        d = response.read()
        logging.debug("Result of telling: {}".format(d))


    def __communicate(self, p):
        stdout, stderr = p.communicate()
        if p.returncode != 0:
            return 10.0
            #raise Exception("Found failed command: \n{}\n{}".format(stdout, stderr))
        if stderr:
            return 10.0
            #raise Exception("Found failed command: \nstdout:\n{}\nstderr:\n{}".format(stdout, stderr))
        return float(stdout.strip())

    def get_specification(self):
        return self.__ask_problem("specification")

    def get_next_point(self):
        while len(self.calculations) >= self.max_running:
            self.sync_finished()
            time.sleep(1.0)
        while True:
            point = self.__ask_problem("next_point")
            if point:
                return point
            self.sync_finished()
            time.sleep(1.0)

    def add_calculation(self, point, proc):
        self.calculations.append( (point, proc) )

    def add_point(self, point):
        self.__tell_problem("add_point", point)

    def sync_finished(self):
        finished_calcs, non_finished_calcs = [], []
        for point, proc in self.calculations:
            if proc.poll() is None:
                non_finished_calcs.append( (point, proc) )
            else:
                finished_calcs.append( (point, proc) )
        self.calculations = non_finished_calcs

        for point, proc in finished_calcs:
            point["Point"][self.spec["Name"]] = self.__communicate(proc)
            self.add_point(point)

    def sync(self):
        while len(self.calculations) > 0:
            self.sync_finished()
            time.sleep(1.0)
    
    def interrupt(self, signal, frame):
        logging.info("Got interrupted")
        logging.info("Need to synchornize running jobs")
        self.sync()
        sys.exit(0)

    def stopped(self):
        return self.stop.is_set()

def run(server, problem, args, num_of_evaluations, max_running):
    ego = TEgoClient(server, problem, max_running)

    for ev_id in xrange(num_of_evaluations):
        if ego.stopped():
            return

        point = ego.get_next_point()
        input_line = " ".join([ str(i) for i in point["Point"].values() ]) + "\n"
        logging.info("Running: \n\t{}\nwith input: {}".format(" ".join(args), input_line))
        p = sub.Popen(args, stdin = sub.PIPE, stdout = sub.PIPE, stderr = sub.PIPE, preexec_fn = os.setsid)
        p.stdin.write(input_line)

        ego.add_calculation(point, p)
    
    ego.sync()

def main(argv):
    parser = argparse.ArgumentParser(description='Ego client')
    parser.add_argument(
        '-s',
        '--server',
        required=False,
        help='Server of Ego, default: %(default)s', default="http://localhost:8080"
    )
    parser.add_argument(
        '-p',
        '--problem',
        required=True,
        help='Problem to run'
    )
    parser.add_argument(
        '-m',
        '--max-running',
        required=False, type=int,
        help='Maximum of evaluations synchroniously', default=100
    )
    parser.add_argument(
        'args',
        type=str,
        help='Args to run', nargs=1
    )
    parser.add_argument(
        '-n',
        '--num-of-evaluations',
        required=False,
        help='Number of evaluations', default=10, type=int
    )

    args = parser.parse_args(argv)

    if len(argv) == 0:
        parser.print_help()
        sys.exit(1)

    logFormatter = logging.Formatter("%(asctime)s [%(levelname)s]  %(message)-100s")
    rootLogger = logging.getLogger()
    rootLogger.setLevel(logging.DEBUG)

    consoleHandler = logging.StreamHandler(sys.stdout)
    consoleHandler.emit = add_coloring_to_emit_ansi(consoleHandler.emit)
    consoleHandler.setFormatter(logFormatter)
    rootLogger.addHandler(consoleHandler)
    args.args = [ os.path.expanduser(a) for a in shlex.split(args.args[0]) ]
    proc_args = []
    for a in args.args:
        if os.path.isfile(a):
            a = os.path.realpath(a)
        proc_args.append(a)
    args.args = proc_args

    run(args.server, args.problem, args.args, args.num_of_evaluations, args.max_running)

if __name__ == '__main__':
    main(sys.argv[1:])
