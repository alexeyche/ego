#!/usr/bin/env python
import argparse
import sys
import os
import urllib2
import logging
import json
import subprocess as sub
import random as rnd
import logging
from collections import OrderedDict
import numpy as np

def lhs_sample(n, rng):
    return (rng.permutation(range(1,n+1)) - rng.random_sample(n))/float(n)


def add_coloring_to_emit_ansi(fn):
    # add methods we need to the class
    def new(*args):
        levelno = args[0].levelno
        if(levelno>=50):
            color = '\x1b[31m' # red
        elif(levelno>=40):
            color = '\x1b[31m' # red
        elif(levelno>=30):
            color = '\x1b[33m' # yellow
        elif(levelno>=20):
            color = '\x1b[32m' # green
        elif(levelno>=10):
            color = '\x1b[35m' # pink
        else:
            color = '\x1b[0m' # normal
        args[0].msg = color + args[0].msg +  '\x1b[0m'  # normal
        return fn(*args)
    return new


class TEgoClient(object):
    def __init__(self, server, problem):
        self.server = server
        self.problem = problem

    def __ask(self, fun):
        ans_str = urllib2.urlopen("{}/api/{}".format(self.server, fun)).read()
        logging.debug("Got answer: {}".format(ans_str))
        ans = json.loads(ans_str, object_pairs_hook=OrderedDict)
        return ans;

    def __ask_problem(self, fun):
        return self.__ask("problem/{}/{}".format(self.problem, fun))

    def __tell_problem(self, fun, telling):
        req = urllib2.Request(
            "{server}/api/problem/{problem}/{fun}".format(
                server = self.server,
                problem = self.problem,
                fun = fun,
            ),
            json.dumps(telling)
        )
        response = urllib2.urlopen(req)
        d = response.read()
        logging.debug("Result of telling: {}".format(d))


    def get_specification(self):
        return self.__ask_problem("specification")

    def get_next_point(self):
        return self.__ask_problem("next_point")

    def add_point(self, point):
        self.__tell_problem("add_point", point)


def run(server, problem, args, num_of_evaluations):
    ego = TEgoClient(server, problem)

    spec = ego.get_specification()

    for ev_id in xrange(num_of_evaluations):
        point = ego.get_next_point()
        logging.debug("Got point with id {}".format(point["Id"]))

        input_line = " ".join([ str(i) for i in point["Point"].values() ]) + "\n"
        logging.info("Running: \n\t{}\nwith input: {}".format(" ".join(args), input_line))
        p = sub.Popen(args, stdin = sub.PIPE, stdout = sub.PIPE, stderr = sub.PIPE)
        stdout, stderr = p.communicate(input = input_line)
        if p.returncode != 0:
            raise Exception("Found failed command: \n{}\n{}".format(stdout, stderr))
        if stderr:
            raise Exception("Found failed command: \nstdout:\n{}\nstderr:\n{}".format(stdout, stderr))
        ans = float(stdout.strip())

        point[spec["Name"]] = ans
        ego.add_point(point)

def main(argv):
    parser = argparse.ArgumentParser(description='Ego client')
    parser.add_argument(
        '-s',
        '--server',
        required=False,
        help='Server of Ego, default: %(default)s', default="http://localhost:8080"
    )
    parser.add_argument(
        '-p',
        '--problem',
        required=True,
        help='Problem to run'
    )
    parser.add_argument(
        'args',
        type=str,
        help='Args to run', nargs="+"
    )
    parser.add_argument(
        '-n',
        '--num-of-evaluations',
        required=False,
        help='Number of evaluations', default=10, type=int
    )

    args = parser.parse_args(argv)

    if len(argv) == 0:
        parser.print_help()
        sys.exit(1)

    logFormatter = logging.Formatter("%(asctime)s [%(levelname)s]  %(message)-100s")
    rootLogger = logging.getLogger()
    rootLogger.setLevel(logging.DEBUG)

    consoleHandler = logging.StreamHandler(sys.stdout)
    consoleHandler.emit = add_coloring_to_emit_ansi(consoleHandler.emit)
    consoleHandler.setFormatter(logFormatter)
    rootLogger.addHandler(consoleHandler)

    run(args.server, args.problem, args.args, args.num_of_evaluations)

if __name__ == '__main__':
    main(sys.argv[1:])
